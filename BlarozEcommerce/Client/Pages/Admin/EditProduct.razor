@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl" />
            }
            else
            {
                foreach (var image in product.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data" />
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           OnClick="@(() => RemoveImage(image.Id))">
                                Remove
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Image(s)</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                            <option value="@productType.Id">@productType.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col">
                    <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="variant.Visible" style="transform: scale(1.5, 1.5);" disabled="@variant.Deleted"></InputCheckbox>
                </div>
                <div class="col removeButton">
                    <button type="button" class="btn btn-danger removeVariant" disabled="@variant.Deleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                        <i class="oi oi-trash"></i>
                    </button>
                </div>
            </div>
        }
        <button type="button" class="btn btn-primary addVariantButton" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
            </InputSelect>
        </div>
        <hr />
        <div class="form-check">
            <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
            <label for="featured" class="form-check-label">Featured</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
            <label for="visible" class="form-check-label">Visible</label>
        </div>
        <hr />
        <button type="submit" class="btn btn-primary float-end">@btnText</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
    else
    {
        <button type="button" class="btn btn-danger float-start" @onclick="Cancel">
            Cancel
        </button>
    }
}
@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };

            btnText = "Create Product";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    async void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (product.Variants.Select(x => x.Deleted == false).Count() == 1)
        {
            JSRuntime.InvokeAsync<bool>("required", "Variant field cannot be empty!");
        }
        else
        {
            if (variant.IsNew)
            {
                product.Variants.Remove(variant);
            }
            else
            {
                variant.Deleted = true;
                //await ProductService.UpdateProduct(product);
                //AddOrUpdateProduct();
                product.IsNew = false;
                product = await ProductService.UpdateProduct(product);
                JSRuntime.InvokeAsync<bool>("timerSuccess");
                await ProductService.GetAdminProducts();
            }
        }
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant { ProductId = product.Id, ProductTypeId = 1, IsNew = true });
        JSRuntime.InvokeAsync<bool>("hideDeleteButton");
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            if (product.Title == "")
            {
                JSRuntime.InvokeAsync<bool>("required", "Title field is required!");
            }
            else if (product.Variants.Count == 0 )
            {
                JSRuntime.InvokeAsync<bool>("required", "Variant field is required!");
            }
            else if (product.CategoryId == 0)
            {
                JSRuntime.InvokeAsync<bool>("required", "Category field is required!");
            }
            else
            {
                JSRuntime.InvokeAsync<bool>("success");
                var result = await ProductService.CreateProduct(product);
                NavigationManager.NavigateTo($"admin/product/{result.Id}");
            }
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(product.Id)).Data;
            var dbProductVariants = dbProduct.Variants.Select(v => v.Deleted == false);
            var productVariants = product.Variants.Select(v => v.Deleted == false);
            var dbProductVariantsVisible = dbProduct.Variants.Select(v => v.Visible);
            var productVariantsVisible = product.Variants.Select(v => v.Visible);
            var dbProductVariantPrice = dbProduct.Variants.Select(p => p.Price);
            var productVariantPrice = product.Variants.Select(p => p.Price);
            var dbProductVariantOriginalPrice = dbProduct.Variants.Select(op => op.OriginalPrice);
            var productVariantOriginalPrice = product.Variants.Select(op => op.OriginalPrice);
            var dbProductImages = dbProduct.Images.Select(i => i.Data);
            var productImages = product.Images.Select(i => i.Data);
            if (dbProductVariantsVisible.SequenceEqual(productVariantsVisible) && dbProductImages.SequenceEqual(productImages) && dbProductVariantOriginalPrice.SequenceEqual(productVariantOriginalPrice) && dbProductVariantPrice.SequenceEqual(productVariantPrice) && dbProductVariants.SequenceEqual(productVariants) && dbProduct.Title == product.Title && dbProduct.ImageUrl == product.ImageUrl && dbProduct.Description == product.Description && dbProduct.CategoryId == product.CategoryId && dbProduct.Featured == product.Featured && dbProduct.Visible == product.Visible)
            {
                JSRuntime.InvokeAsync<bool>("noChange", "No changes were found!");
                await ProductService.GetAdminProducts();
            }
            else
            {
                if (product.Title == "")
                {
                    JSRuntime.InvokeAsync<bool>("required", "Title field is required!");
                }
                else
                {
                    product.IsNew = false;
                    product = await ProductService.UpdateProduct(product);
                    JSRuntime.InvokeAsync<bool>("timerSuccess");
                    await ProductService.GetAdminProducts();
                }
            }
        }
    }

    async void DeleteProduct()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("customConfirm");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async void Cancel()
    {
        NavigationManager.NavigateTo("admin/products");
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}
