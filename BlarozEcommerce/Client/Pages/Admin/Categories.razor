@page "/admin/categories"
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<h3 style="display: inline;">Categories</h3>
<button class="btn btn-primary float-end addButton" @onclick="CreateNewCategory">
    <i class="oi oi-plus"></i> Add new category
</button>
<br />
<br />
<div class="header">
    <div class="col">Name</div>
    <div class="col">Url</div>
    <div class="col">Visible</div>
    <div class="col"></div>
</div>

@foreach (var category in CategoryService.AdminCategories)
{
    @if (category.Editing)
    {
        <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingCategory.Name" class="form-control inputName"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputCheckbox @bind-Value="editingCategory.Visible" style="transform: scale(1.5,1.5);"></InputCheckbox>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-danger" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row response">
            <div class="col">
                @category.Name
            </div>
            <div class="col">
                @category.Url
            </div>
            <div class="col">
                <span>@(category.Visible ? "✔" : "")</span>
            </div>
            <div class="col actionButtons">
                <button class="btn btn-primary" @onclick="(() => EditCategory(category))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-danger" @onclick="(() => DeleteCategory(category.Id))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }
}
@code {
    Category editingCategory = null;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategories();
        CategoryService.Onchange += StateHasChanged;
    }

    public void Dispose()
    {
        CategoryService.Onchange -= StateHasChanged;
    }

    private async void CreateNewCategory()
    {
        JSRuntime.InvokeAsync<bool>("hide");
        //JSRuntime.InvokeAsync<bool>("myFunction");
        editingCategory = CategoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        JSRuntime.InvokeAsync<bool>("hide");
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory.Id == 0)
        {
            if (editingCategory.Name == "")
            {
                JSRuntime.InvokeAsync<bool>("required", "Name field is required!");
            }
            else if (editingCategory.Url == "")
            {
                JSRuntime.InvokeAsync<bool>("required", "Url field is required!");
            }
            else
            {
                JSRuntime.InvokeAsync<bool>("success");
                JSRuntime.InvokeAsync<bool>("show");
                await CategoryService.AddCategory(editingCategory);
            }
        }
        else
        {
            Category dbCategory = (await CategoryService.GetCategory(editingCategory.Id)).Data;
            if (editingCategory.Name == dbCategory.Name && editingCategory.Url == dbCategory.Url && editingCategory.Visible == dbCategory.Visible)
            {
                JSRuntime.InvokeAsync<bool>("noChange", "No changes were found!");
                await CategoryService.GetAdminCategories();
            }
            else
            {
                JSRuntime.InvokeAsync<bool>("success");
                await CategoryService.UpdateCategory(editingCategory);
                editingCategory = new Category();
            }
            JSRuntime.InvokeAsync<bool>("show");
        }
    }

    private async Task CancelEditing()
    {
        JSRuntime.InvokeAsync<bool>("show");
        editingCategory = new Category();
        await CategoryService.GetAdminCategories();
    }

    private async Task DeleteCategory(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("customConfirm");
        if (confirmed)
        {
            await CategoryService.DeleteCategory(id);
        }
    }
}
